{"version":3,"sources":["components/Pages/Home.js","components/Pages/NotFound.js","settings.js","components/Pages/TodosSample.js","Urls.js","store/authActionTypes.js","store/authActions.js","App.js","serviceWorker.js","store/authReducer.js","index.js"],"names":["Home","NotFound","to","API_SERVER_VAL","process","REACT_APP_DEBUG","API_SERVER","SESSION_DURATION","state","todos","a","fetch","settings","res","json","this","setState","console","log","Object","entries","map","key","value","item","title","description","id","Component","Urls","props","someState","token","exact","path","component","TodosSample","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","authSuccess","type","actionTypes","authLogout","localStorage","getItem","undefined","axios","post","headers","then","catch","err","removeItem","authCheckTimeout","expirationTime","dispatch","setTimeout","connect","isAuthenticated","auth","setAuthenticatedIfRequired","expirationDate","Date","getTime","logout","actions","className","Boolean","window","location","hostname","match","initialState","error","loading","updateObject","oldObject","updatedProperties","authStartReducer","action","authSuccessReducer","authreducerwashere","authFailReducer","authLogoutReducer","Reducer","reducer","combineReducers","authReducer","composeEnhanced","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4SAYeA,ICAAC,EATE,kBACf,gCACE,kDACA,cAAC,IAAD,CAAMC,GAAG,IAAT,yB,iECNAC,EAAiB,GAErB,OAAQC,0YAAYC,iBAEhB,KAAK,EACDF,EAAiB,cACjB,MAGJ,KAAK,EACDA,EAAiB,wBACjB,MACJ,QACIA,EAAiB,cAIlB,IAAMG,EAAaH,EAIbI,EAAmB,MC0CjBP,E,4MAxCbQ,MAAQ,CACNC,MAAO,I,8FAGT,8BAAAC,EAAA,+EAEsBC,MAAMC,GAF5B,cAEUC,EAFV,gBAGwBA,EAAIC,OAH5B,OAGUL,EAHV,OAIIM,KAAKC,SAAS,CACZP,UALN,kDAQIQ,QAAQC,IAAR,MARJ,0D,0EAYA,WAKE,OAJAD,QAAQC,IAAI,QACZD,QAAQC,IAAIN,GACZK,QAAQC,IAAId,2YACZa,QAAQC,IAAI,QAEV,gCACI,0DACF,6BACCC,OAAOC,QAAQhB,2YACfiB,KAAK,mCAAEC,EAAF,KAAOC,EAAP,YAAkB,mCAAMD,EAAN,QAAgBC,UAExC,uBACCR,KAAKP,MAAMC,MAAMY,KAAI,SAAAG,GAAI,OACxB,gCACE,6BAAKA,EAAKC,QACV,+BAAOD,EAAKE,gBAFJF,EAAKG,c,GA/BNC,aCmEJC,MAnCf,SAAcC,EAAOC,GAGjB,GAFAd,QAAQC,IAAI,UAAWY,GAEJ,OAAhBA,EAAME,OAIT,OACI,8BACI,cAAC,IAAD,UACI,eAAC,IAAD,WAiBI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,cAAC,IAAD,CAAOD,UAAWlC,Y,yBClFzBoC,EAAa,aACbC,EAAe,eACfC,EAAY,YACZC,EAAc,cC2BdC,EAAc,SAACT,GACxB,MAAO,CACHU,KAAMC,EACNX,MAAOA,IAWFY,EAAa,WACtB,IAAMZ,EAAQa,aAAaC,QAAQ,SAUnC,YATcC,IAAVf,IAGAgB,IAAMC,KAAN,UAAcrC,EAAd,qBAAsD,GACnD,CAACsC,QAAS,CAAC,cAAgB,SAAhB,OAA0BlB,MAAYmB,MAAK,SAAAtC,GAAQI,QAAQC,IAAIL,MAAOuC,OAAM,SAAAC,GAAQpC,QAAQC,IAAImC,MAC9GR,aAAaS,WAAW,UAJxBT,aAAaS,WAAW,kBAQrB,CACHZ,KAAMC,IAWDY,EAAmB,SAAAC,GAC5B,OAAO,SAAAC,GACHC,YAAW,WACPD,EAASb,OACVY,KC5BX,IAeeG,eAfS,SAACnD,GACrB,MAAO,CACHoD,gBAAsC,OAArBpD,EAAMqD,KAAK7B,OAA8C,qBAArBxB,EAAMqD,KAAK7B,MAChEA,MAAOxB,EAAMqD,KAAK7B,UAKC,SAACyB,GACxB,MAAO,CACHK,2BAA4B,kBAAML,GD6C/B,SAAAA,GACH,IAAMzB,EAAQa,aAAaC,QAAQ,SACnC,QAAcC,IAAVf,EACAyB,EAASb,SACN,CACH,IAAMmB,EAAiB,IAAIC,KAAKnB,aAAaC,QAAQ,mBAChDiB,GAAkB,IAAIC,KACvBP,EAASb,MAETa,EAAShB,EAAYT,IACrByB,EAASF,EAAkBQ,EAAeE,WAAY,IAAID,MAAOC,kBCtDzEC,OAAQ,kBAAMT,EAASU,SAIhBR,EAhDf,SAAa7B,GAyBT,OADAb,QAAQC,IAAI,SAAUY,GAElB,qBAAKsC,UAAU,MAAf,SACI,cAAC,EAAD,eAAWtC,SCzBHuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCZOC,EAAe,CACxBC,MAAO,KACPC,SAAS,EACT5C,MAAO,MAOL6C,EAAe,SAACC,EAAWC,GAC7B,OAAO,2BACAD,GACAC,IAOLC,EAAmB,SAACxE,EAAOyE,GAC7B,OAAOJ,EAAarE,EAAO,CACvBmE,MAAO,KACPC,SAAS,KAIXM,EAAqB,SAAC1E,EAAOyE,GAC/B,OAAOJ,EAAarE,EAAO,CACvBmE,MAAO,KACPC,SAAS,EACT5C,MAAOiD,EAAOjD,MACdmD,mBAAoB,UAItBC,EAAkB,SAAC5E,EAAOyE,GAC5B,OAAOJ,EAAarE,EAAO,CACvBmE,MAAOM,EAAON,MACdC,SAAS,KAIXS,EAAoB,SAAC7E,EAAOyE,GAC9B,OAAOJ,EAAarE,EAAO,CACvBwB,MAAO,QAmBAsD,EAXC,WAAiC,IAAhC9E,EAA+B,uDAAzBkE,EAAcO,EAAW,uCAC5C,OAAQA,EAAOvC,MACX,KAAKC,EAAwB,OAAOqC,EAAiBxE,GACrD,KAAKmC,EAA0B,OAAOuC,EAAmB1E,EAAOyE,GAChE,KAAKtC,EAAuB,OAAOyC,EAAgB5E,EAAOyE,GAC1D,KAAKtC,EAAyB,OAAO0C,EAAkB7E,GACvD,QACI,OAAOA,ICvDb+E,EAAUC,YAAgB,CAAE3B,KAAM4B,IAElCC,EAAkBpB,OAAOqB,sCAAwCC,IACjEC,EAAQC,YAAYP,EAASG,EAAgBK,YAAgBC,OAGnEC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SAEQ,cAAC,EAAD,QAIVO,SAASC,eAAe,SF0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdtD,OAAM,SAAAuB,GACL1D,QAAQ0D,MAAMA,EAAMgC,c","file":"static/js/main.0af81d93.chunk.js","sourcesContent":["import React from 'react'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nfunction Home() {\n    return (\n        <React.Fragment>\n            <CssBaseline />\n            <div>\n                <h1>Home Page</h1>\n            </div>\n        </React.Fragment>\n    )\n}\nexport default Home\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => (\n  <div>\n    <h1>404 - Not Found!</h1>\n    <Link to=\"/\">\n      Go Home\n    </Link>\n  </div>\n);\n\nexport default NotFound;","let API_SERVER_VAL = '';\n\nswitch (process.env.REACT_APP_DEBUG) {\n    // Prod\n    case 0:\n        API_SERVER_VAL = '/djangoApp/';\n        break;\n\n    // Local\n    case 1:\n        API_SERVER_VAL = 'http://localhost:' + process.env.REACT_APP_DJANGO_PORT;\n        break;\n    default:\n        API_SERVER_VAL = '/djangoApp/';\n        break;\n}\n\nexport const API_SERVER = API_SERVER_VAL;\n\n// Session / token expiration time\n// 100 days\nexport const SESSION_DURATION = 1000*3600*24*100;","// import React from 'react'\n// import CssBaseline from '@material-ui/core/CssBaseline';\n// function Home() {\n//     return (\n//         <React.Fragment>\n//             <CssBaseline />\n//             <div>\n//                 <h1>Home Page</h1>\n//             </div>\n//         </React.Fragment>\n//     )\n// }\n// export default Home\n\n\n\n\n\n// App.js\nimport React, { Component } from 'react';\nimport * as settings from '../../settings';\n\nclass Home extends Component {\n  state = {\n    todos: []\n  };\n\n  async componentDidMount() {\n    try {\n      const res = await fetch(settings.API_SERVER);\n      const todos = await res.json();\n      this.setState({\n        todos\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  render() {\n    console.log(\"----\");\n    console.log(settings)\n    console.log(process.env)\n    console.log(\"----\");\n    return (\n      <div>\n          <h1>Here are your Todos! v3 </h1>\n        <ul>\n        {Object.entries(process.env)\n        .map( ([key, value]) => <li>${key} -> ${value}</li> )}\n        </ul>\n        <hr/>\n        {this.state.todos.map(item => (\n          <div key={item.id}>\n            <h1>{item.title}</h1>\n            <span>{item.description}</span>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Home from \"./components/Pages/Home\";\nimport NotFound from \"./components/Pages/NotFound\"\nimport TodosSample from \"./components/Pages/TodosSample\"\n\n// A wrapper for <Route> that redirects to the login screen if you're not yet authenticated.\nfunction PrivateRoute({ isAuthenticated, children, ...rest}) {\n\n    return (\n      <Route\n        {...rest}\n        render={({ location }) =>\n        isAuthenticated ? (\n            children\n          ) : (\n            <Redirect\n              to={{\n                pathname: \"/login/\",\n                state: { from: location }\n              }}\n            />\n          )\n        }\n      />\n    );\n  }\n\n\nfunction PrivateRouteComp({ isAuthenticated, Component,...props}) {\n    {/*<PrivateRoute path=\"/royale2/:id\" isAuthenticated={props.isAuthenticated}  render={matchProps => <Royale {...props} {...matchProps} />} />*/}\n\n    // const { children, ...props } = rest;\n    return (\n      <Route\n        {...props}\n        render={({ location }) =>\n        isAuthenticated ? (\n            <Component match={props.computedMatch} {...location} {...props}/>\n          ) : (\n            <Redirect\n              to={{\n                pathname: \"/login/\",\n                state: { from: location }\n              }}\n            />\n          )\n        }\n      />\n    );\n  }\n\n\nfunction Urls(props, someState) {\n    console.log(\"URLS > \", props)\n\n    if(props.token !== null){\n        let kek = 1;\n    }\n\n    return (\n        <div>\n            <BrowserRouter>\n                <Switch>\n                     {/*<Route exact path=\"/tutorial/\"> <Tutorial {...props} /></Route>*/}\n                     {/*<PrivateRoute exact path=\"/update_password/\" isAuthenticated={props.isAuthenticated}><PasswordUpdate {...props}/></PrivateRoute>*/}\n                     {/*<PrivateRoute exact path=\"/\" isAuthenticated={props.isAuthenticated}><Home {...props} someState={someState}/></PrivateRoute>*/}\n                     {/*/!*<PrivateRoute2 path=\"/royale/:id\" component={Royale} props={props}/>*!/*/}\n                     {/*<PrivateRouteComp path=\"/royale/:id\"*/}\n                     {/*                  isAuthenticated={props.isAuthenticated}*/}\n                     {/*                  props={props}*/}\n                     {/*                  Component={Royale}*/}\n                     {/*                  customToolbar={props.customToolbar}*/}\n                     {/*                  setCustomToolbar={props.setCustomToolbar}*/}\n                     {/*></PrivateRouteComp>*/}\n                     {/*/!*<PrivateRouteComp path=\"/royale/:id\" isAuthenticated={props.isAuthenticated} props={props}><Royale {...props}/></PrivateRouteComp>*!/*/}\n                     {/*<PrivateRoute path=\"/usersettings\" component={UserSettings} props={props}/>*/}\n\n                     {/*<Route exact path=\"/\" isAuthenticated={props.isAuthenticated}><Home {...props} someState={someState}/></Route>*/}\n                    {/*<Route exact path=\"/todossample\" component={TodosSample} />*/}\n                    <Route exact path=\"/\" component={TodosSample} />\n                    <Route component={NotFound} />\n                </Switch>\n            </BrowserRouter>\n        </div>\n    )\n};\n\nexport default Urls;\n","export const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';","import axios from 'axios';\nimport * as actionTypes from './authActionTypes';\nimport * as settings from '../settings';\n\nconst SESSION_DURATION = 1000*3600*24*100;\n\n// ########################################################\n// ########################################################\n// Contains Auth Action Functions. These perform two kinds of things:\n// 1) Return Action Objects\n    // a) Simply Return an Action Object\n    // b) Perform some action and then return an Action Objet\n// 2) Return A Dispatch(Action) combination\n    // a)Perform an action then return a Dispatch(Action) combination.\n        // This Dispatch(Action) could be used by some other function to dispatch action to the store\n// ########################################################\n// ########################################################\n\n\n// ########################################################\n// ########################################################\n// Auth Action Functions returning Action Objects\n// ########################################################\n// ########################################################\nexport const authStart = () => {\n    return {\n        type: actionTypes.AUTH_START\n    }\n}\n\nexport const authSuccess = (token) => {\n    return {\n        type: actionTypes.AUTH_SUCCESS,\n        token: token\n    }\n}\n\nexport const authFail = error => {\n    return {\n        type: actionTypes.AUTH_FAIL,\n        error: error\n    }\n}\n\nexport const authLogout = () => {\n    const token = localStorage.getItem('token');\n    if (token === undefined){\n        localStorage.removeItem('expirationDate');\n    } else {\n        axios.post(`${settings.API_SERVER}/api/auth/logout/`, {\n        }, {headers: {'Authorization': `Token ${token}`}} ).then(res => {console.log(res)}).catch(err => {console.log(err)});\n        localStorage.removeItem('token');\n        localStorage.removeItem('expirationDate');\n    }\n\n    return {\n        type: actionTypes.AUTH_LOGOUT\n    };\n}\n\n// ########################################################\n// ########################################################\n// Auth Action Functions returning A Dispatch(Action) combination after performing some action\n// ########################################################\n// ########################################################\n\n// This sets a timer, which would automatically logout the user after a specified time\nexport const authCheckTimeout = expirationTime => {\n    return dispatch => {\n        setTimeout(() => {\n            dispatch(authLogout());\n        }, expirationTime)\n    }\n}\n\nexport const authLogin = (username, password) => {\n    return dispatch => {\n        dispatch(authStart());\n        axios.post(`${settings.API_SERVER}/api/auth/login/`, {\n            username: username,\n            password: password\n        })\n        .then(res => {\n            const token = res.data.key;\n            const expirationDate = new Date(new Date().getTime() + SESSION_DURATION );\n            localStorage.setItem('token', token);\n            localStorage.setItem('expirationDate', expirationDate);\n            dispatch(authSuccess(token));\n            dispatch(authCheckTimeout(SESSION_DURATION));\n        })\n        .catch(err => {\n            dispatch(authFail(err))\n        });\n    }\n}\n\n\nexport const authCheckState = () => {\n    return dispatch => {\n        const token = localStorage.getItem('token');\n        if (token === undefined) {\n            dispatch(authLogout());\n        } else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if ( expirationDate <= new Date() ) {\n                dispatch(authLogout());\n            } else {\n                dispatch(authSuccess(token));\n                dispatch(authCheckTimeout( expirationDate.getTime() - new Date().getTime()) );\n            }\n        }\n    }\n}","import React from 'react';\nimport Urls from './Urls';\n// import Layout from './components/GlobalLayouts/Layout';\nimport {connect} from 'react-redux';\nimport * as actions from './store/authActions';\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// import './App.scss';\n// import * as utils from './components/CustomUtils.js';\n\n\nfunction App(props) {\n    // const [left, setleft] = React.useState(false)\n    // const [customToolbar, setCustomToolbar] = React.useState(false)\n\n    // function toggleDrawer() {\n    //     // if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\n    //     //   return;\n    //     // }\n    //\n    //     setleft(false);\n    // };\n    //\n    // function openDrawer() {\n    //     setleft(true);\n    // };\n    //\n    //\n    //\n    // // Similar to componentDidMount and componentDidUpdate:\n    // React.useEffect(() => {\n    //     props.setAuthenticatedIfRequired();\n    // }, []);\n\n\n    console.log(\"APP > \", props)\n    return (\n        <div className=\"App\">\n            <Urls  {...props} />\n        </div>\n    );\n}\n\n//This means that one or more of the redux states in the store are available as props\nconst mapStateToProps = (state) => {\n    return {\n        isAuthenticated: state.auth.token !== null && typeof state.auth.token !== 'undefined',\n        token: state.auth.token\n    }\n}\n\n//This means that one or more of the redux actions in the form of dispatch(action) combinations are available as props\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setAuthenticatedIfRequired: () => dispatch(actions.authCheckState()),\n        logout: () => dispatch(actions.authLogout())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This django app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import * as actionTypes from './authActionTypes';\n\n// ########################################################\n// Initial State\n// ########################################################\n\nexport const initialState = {\n    error: null,\n    loading: false,\n    token: null\n}\n\n// ########################################################\n// A simple function to update the state with new values\n// ########################################################\n\nconst updateObject = (oldObject, updatedProperties) => {\n    return {\n        ...oldObject,\n        ...updatedProperties\n    }\n}\n\n// ########################################################\n// Different Reducer Functions which change the store state\n// ########################################################\nconst authStartReducer = (state, action) => {\n    return updateObject(state, {\n        error: null,\n        loading: true\n    });\n}\n\nconst authSuccessReducer = (state, action) => {\n    return updateObject(state, {\n        error: null,\n        loading: false,\n        token: action.token,\n        authreducerwashere: \"yeet\"\n    });\n}\n\nconst authFailReducer = (state, action) => {\n    return updateObject(state, {\n        error: action.error,\n        loading: false\n    });\n}\n\nconst authLogoutReducer = (state, action) => {\n    return updateObject(state, {\n        token: null\n    });\n}\n\n// ########################################################\n// The Main Reducer\n// ########################################################\n\nconst Reducer = (state=initialState, action) => {\n    switch (action.type) {\n        case actionTypes.AUTH_START: return authStartReducer(state, action);\n        case actionTypes.AUTH_SUCCESS: return authSuccessReducer(state, action);\n        case actionTypes.AUTH_FAIL: return authFailReducer(state, action);\n        case actionTypes.AUTH_LOGOUT: return authLogoutReducer(state, action);\n        default:\n            return state;\n    }\n}\n\nexport default Reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { combineReducers, createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport authReducer from './store/authReducer';\n// import { SnackbarProvider } from 'notistack';\n\nconst reducer = combineReducers({ auth: authReducer }); // Using Combine Reducers here although only one reducer is present.\n// Official explaination here: https://react-redux.js.org/using-react-redux/connect-mapstate#mapstatetoprops-will-not-run-if-the-store-state-is-the-same\nconst composeEnhanced = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose // The first one is to make the chrome dev extension work\nconst store = createStore(reducer, composeEnhanced(applyMiddleware(thunk))); // We are using thunk, because it allows delaying the dispatch actions\n// Thunk wraps the dispatch actions into custom functions which are available with the mapDispatchToProps\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        {/*<SnackbarProvider maxSnack={3}>*/}\n            <App />\n        {/*</SnackbarProvider>*/}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}